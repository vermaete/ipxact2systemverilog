[global]
# Do add unused bits in a register between two used fields.
# E.g.
#   Input:
#      <spirit:field>
#        <spirit:name>nibble0</spirit:name>
#        <spirit:description>write something useful for nibble0</spirit:description>
#        <spirit:bitOffset>0</spirit:bitOffset>
#        <spirit:bitWidth>4</spirit:bitWidth>
#      </spirit:field>
#      <spirit:field>
#        <spirit:name>nibble1</spirit:name>
#        <spirit:description>write something useful for nibble1</spirit:description>
#        <spirit:bitOffset>8</spirit:bitOffset>
#        <spirit:bitWidth>4</spirit:bitWidth>
#      </spirit:field>
#   Output (VHDL):
#      type reg7_record_type is record
#        nibble1 : std_ulogic_vector(3 downto 0); -- [11:8]
#        unused0 : std_ulogic_vector(3 downto 0); -- [7:4]
#        nibble0 : std_ulogic_vector(3 downto 0); -- [3:0]
#      end record;
UnusedHoles = yes


# If no: no enums will be generated for register fields of 1 bit.
# If yes: enums will be generated even if the register field is 1 bit width.
OneBitEnum = no

[vhdl]
# If no:  Conversion funtions will not be made public in the VHDL package
# If yes: Conversion funtions will be made public in the VHDL package
PublicConvFunct = no
# if resoved: std_logic_vector will be used
# if unresoved: std_ulogic_vector will be used (default)
std = unresolved

# RestructuredText
[rst]
# if yes, insert the bitfield json content of Wavedrom into the RestructredText file.
# Only Sphinx with the sphinxcontrib-wavedrom plugin will be able to use this.
# @see:
#     - https://github.com/bavovanachte/sphinx-wavedrom
#     - https://github.com/wavedrom/bitfield
wavedrom = no
